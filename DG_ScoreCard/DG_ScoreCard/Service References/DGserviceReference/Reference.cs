//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DG_ScoreCard.DGserviceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DGserviceReference.IDGservice")]
    public interface IDGservice {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDGservice/getUserID", ReplyAction="http://tempuri.org/IDGservice/getUserIDResponse")]
        string getUserID(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDGservice/getUserID", ReplyAction="http://tempuri.org/IDGservice/getUserIDResponse")]
        System.Threading.Tasks.Task<string> getUserIDAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDGservice/insertLocation", ReplyAction="http://tempuri.org/IDGservice/insertLocationResponse")]
        void insertLocation(string loc_address, string loc_state, string loc_city, string loc_country, string loc_zip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDGservice/insertLocation", ReplyAction="http://tempuri.org/IDGservice/insertLocationResponse")]
        System.Threading.Tasks.Task insertLocationAsync(string loc_address, string loc_state, string loc_city, string loc_country, string loc_zip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDGservice/insertUser", ReplyAction="http://tempuri.org/IDGservice/insertUserResponse")]
        void insertUser(string username, string fname, string lname, string email, string phone, string shash, string loc_address, string loc_state, string loc_city, string loc_country, string loc_zip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDGservice/insertUser", ReplyAction="http://tempuri.org/IDGservice/insertUserResponse")]
        System.Threading.Tasks.Task insertUserAsync(string username, string fname, string lname, string email, string phone, string shash, string loc_address, string loc_state, string loc_city, string loc_country, string loc_zip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDGservice/checkUsername", ReplyAction="http://tempuri.org/IDGservice/checkUsernameResponse")]
        string checkUsername(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDGservice/checkUsername", ReplyAction="http://tempuri.org/IDGservice/checkUsernameResponse")]
        System.Threading.Tasks.Task<string> checkUsernameAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDGservice/checkLocation", ReplyAction="http://tempuri.org/IDGservice/checkLocationResponse")]
        bool checkLocation(string address, string state, string city, string country, string zip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDGservice/checkLocation", ReplyAction="http://tempuri.org/IDGservice/checkLocationResponse")]
        System.Threading.Tasks.Task<bool> checkLocationAsync(string address, string state, string city, string country, string zip);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDGserviceChannel : DG_ScoreCard.DGserviceReference.IDGservice, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DGserviceClient : System.ServiceModel.ClientBase<DG_ScoreCard.DGserviceReference.IDGservice>, DG_ScoreCard.DGserviceReference.IDGservice {
        
        public DGserviceClient() {
        }
        
        public DGserviceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DGserviceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DGserviceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DGserviceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string getUserID(string id) {
            return base.Channel.getUserID(id);
        }
        
        public System.Threading.Tasks.Task<string> getUserIDAsync(string id) {
            return base.Channel.getUserIDAsync(id);
        }
        
        public void insertLocation(string loc_address, string loc_state, string loc_city, string loc_country, string loc_zip) {
            base.Channel.insertLocation(loc_address, loc_state, loc_city, loc_country, loc_zip);
        }
        
        public System.Threading.Tasks.Task insertLocationAsync(string loc_address, string loc_state, string loc_city, string loc_country, string loc_zip) {
            return base.Channel.insertLocationAsync(loc_address, loc_state, loc_city, loc_country, loc_zip);
        }
        
        public void insertUser(string username, string fname, string lname, string email, string phone, string shash, string loc_address, string loc_state, string loc_city, string loc_country, string loc_zip) {
            base.Channel.insertUser(username, fname, lname, email, phone, shash, loc_address, loc_state, loc_city, loc_country, loc_zip);
        }
        
        public System.Threading.Tasks.Task insertUserAsync(string username, string fname, string lname, string email, string phone, string shash, string loc_address, string loc_state, string loc_city, string loc_country, string loc_zip) {
            return base.Channel.insertUserAsync(username, fname, lname, email, phone, shash, loc_address, loc_state, loc_city, loc_country, loc_zip);
        }
        
        public string checkUsername(string username) {
            return base.Channel.checkUsername(username);
        }
        
        public System.Threading.Tasks.Task<string> checkUsernameAsync(string username) {
            return base.Channel.checkUsernameAsync(username);
        }
        
        public bool checkLocation(string address, string state, string city, string country, string zip) {
            return base.Channel.checkLocation(address, state, city, country, zip);
        }
        
        public System.Threading.Tasks.Task<bool> checkLocationAsync(string address, string state, string city, string country, string zip) {
            return base.Channel.checkLocationAsync(address, state, city, country, zip);
        }
    }
}
