//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DG_ScoreCard.DGserviceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="login", Namespace="http://schemas.datacontract.org/2004/07/WCFwebserviceDG")]
    [System.SerializableAttribute()]
    public partial class login : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private char user_activeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string user_cstringField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string user_usernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public char user_active {
            get {
                return this.user_activeField;
            }
            set {
                if ((this.user_activeField.Equals(value) != true)) {
                    this.user_activeField = value;
                    this.RaisePropertyChanged("user_active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string user_cstring {
            get {
                return this.user_cstringField;
            }
            set {
                if ((object.ReferenceEquals(this.user_cstringField, value) != true)) {
                    this.user_cstringField = value;
                    this.RaisePropertyChanged("user_cstring");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string user_username {
            get {
                return this.user_usernameField;
            }
            set {
                if ((object.ReferenceEquals(this.user_usernameField, value) != true)) {
                    this.user_usernameField = value;
                    this.RaisePropertyChanged("user_username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DGserviceReference.IDGservice")]
    public interface IDGservice {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDGservice/getUserID", ReplyAction="http://tempuri.org/IDGservice/getUserIDResponse")]
        string getUserID(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDGservice/getUserID", ReplyAction="http://tempuri.org/IDGservice/getUserIDResponse")]
        System.Threading.Tasks.Task<string> getUserIDAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDGservice/insertLocation", ReplyAction="http://tempuri.org/IDGservice/insertLocationResponse")]
        void insertLocation(string loc_address, string loc_state, string loc_city, string loc_country, string loc_zip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDGservice/insertLocation", ReplyAction="http://tempuri.org/IDGservice/insertLocationResponse")]
        System.Threading.Tasks.Task insertLocationAsync(string loc_address, string loc_state, string loc_city, string loc_country, string loc_zip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDGservice/insertUser", ReplyAction="http://tempuri.org/IDGservice/insertUserResponse")]
        void insertUser(string username, string fname, string lname, string email, string phone, string shash, string loc_address, string loc_state, string loc_city, string loc_country, string loc_zip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDGservice/insertUser", ReplyAction="http://tempuri.org/IDGservice/insertUserResponse")]
        System.Threading.Tasks.Task insertUserAsync(string username, string fname, string lname, string email, string phone, string shash, string loc_address, string loc_state, string loc_city, string loc_country, string loc_zip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDGservice/checkUsername", ReplyAction="http://tempuri.org/IDGservice/checkUsernameResponse")]
        string checkUsername(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDGservice/checkUsername", ReplyAction="http://tempuri.org/IDGservice/checkUsernameResponse")]
        System.Threading.Tasks.Task<string> checkUsernameAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDGservice/checkLocation", ReplyAction="http://tempuri.org/IDGservice/checkLocationResponse")]
        bool checkLocation(string address, string state, string city, string country, string zip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDGservice/checkLocation", ReplyAction="http://tempuri.org/IDGservice/checkLocationResponse")]
        System.Threading.Tasks.Task<bool> checkLocationAsync(string address, string state, string city, string country, string zip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDGservice/returnCstringLists", ReplyAction="http://tempuri.org/IDGservice/returnCstringListsResponse")]
        System.Collections.Generic.List<DG_ScoreCard.DGserviceReference.login> returnCstringLists(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDGservice/returnCstringLists", ReplyAction="http://tempuri.org/IDGservice/returnCstringListsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<DG_ScoreCard.DGserviceReference.login>> returnCstringListsAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDGservice/insertCourse", ReplyAction="http://tempuri.org/IDGservice/insertCourseResponse")]
        void insertCourse(
                    string name, 
                    string website, 
                    string phone, 
                    string basket_type, 
                    string year_established, 
                    string tee_type, 
                    string course_type, 
                    string terrain, 
                    string basket_maker, 
                    System.Nullable<char> course_private, 
                    System.Nullable<char> p2p, 
                    System.Nullable<char> guide, 
                    string course_designer, 
                    string user, 
                    string address, 
                    string state, 
                    string city, 
                    string country, 
                    string zip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDGservice/insertCourse", ReplyAction="http://tempuri.org/IDGservice/insertCourseResponse")]
        System.Threading.Tasks.Task insertCourseAsync(
                    string name, 
                    string website, 
                    string phone, 
                    string basket_type, 
                    string year_established, 
                    string tee_type, 
                    string course_type, 
                    string terrain, 
                    string basket_maker, 
                    System.Nullable<char> course_private, 
                    System.Nullable<char> p2p, 
                    System.Nullable<char> guide, 
                    string course_designer, 
                    string user, 
                    string address, 
                    string state, 
                    string city, 
                    string country, 
                    string zip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDGservice/insertPark", ReplyAction="http://tempuri.org/IDGservice/insertParkResponse")]
        void insertPark(string name, string hour_h, string hour_l, System.Nullable<char> guide, System.Nullable<char> pet, System.Nullable<char> pri, string user_id, string course_name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDGservice/insertPark", ReplyAction="http://tempuri.org/IDGservice/insertParkResponse")]
        System.Threading.Tasks.Task insertParkAsync(string name, string hour_h, string hour_l, System.Nullable<char> guide, System.Nullable<char> pet, System.Nullable<char> pri, string user_id, string course_name);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDGserviceChannel : DG_ScoreCard.DGserviceReference.IDGservice, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DGserviceClient : System.ServiceModel.ClientBase<DG_ScoreCard.DGserviceReference.IDGservice>, DG_ScoreCard.DGserviceReference.IDGservice {
        
        public DGserviceClient() {
        }
        
        public DGserviceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DGserviceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DGserviceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DGserviceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string getUserID(string id) {
            return base.Channel.getUserID(id);
        }
        
        public System.Threading.Tasks.Task<string> getUserIDAsync(string id) {
            return base.Channel.getUserIDAsync(id);
        }
        
        public void insertLocation(string loc_address, string loc_state, string loc_city, string loc_country, string loc_zip) {
            base.Channel.insertLocation(loc_address, loc_state, loc_city, loc_country, loc_zip);
        }
        
        public System.Threading.Tasks.Task insertLocationAsync(string loc_address, string loc_state, string loc_city, string loc_country, string loc_zip) {
            return base.Channel.insertLocationAsync(loc_address, loc_state, loc_city, loc_country, loc_zip);
        }
        
        public void insertUser(string username, string fname, string lname, string email, string phone, string shash, string loc_address, string loc_state, string loc_city, string loc_country, string loc_zip) {
            base.Channel.insertUser(username, fname, lname, email, phone, shash, loc_address, loc_state, loc_city, loc_country, loc_zip);
        }
        
        public System.Threading.Tasks.Task insertUserAsync(string username, string fname, string lname, string email, string phone, string shash, string loc_address, string loc_state, string loc_city, string loc_country, string loc_zip) {
            return base.Channel.insertUserAsync(username, fname, lname, email, phone, shash, loc_address, loc_state, loc_city, loc_country, loc_zip);
        }
        
        public string checkUsername(string username) {
            return base.Channel.checkUsername(username);
        }
        
        public System.Threading.Tasks.Task<string> checkUsernameAsync(string username) {
            return base.Channel.checkUsernameAsync(username);
        }
        
        public bool checkLocation(string address, string state, string city, string country, string zip) {
            return base.Channel.checkLocation(address, state, city, country, zip);
        }
        
        public System.Threading.Tasks.Task<bool> checkLocationAsync(string address, string state, string city, string country, string zip) {
            return base.Channel.checkLocationAsync(address, state, city, country, zip);
        }
        
        public System.Collections.Generic.List<DG_ScoreCard.DGserviceReference.login> returnCstringLists(string username) {
            return base.Channel.returnCstringLists(username);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<DG_ScoreCard.DGserviceReference.login>> returnCstringListsAsync(string username) {
            return base.Channel.returnCstringListsAsync(username);
        }
        
        public void insertCourse(
                    string name, 
                    string website, 
                    string phone, 
                    string basket_type, 
                    string year_established, 
                    string tee_type, 
                    string course_type, 
                    string terrain, 
                    string basket_maker, 
                    System.Nullable<char> course_private, 
                    System.Nullable<char> p2p, 
                    System.Nullable<char> guide, 
                    string course_designer, 
                    string user, 
                    string address, 
                    string state, 
                    string city, 
                    string country, 
                    string zip) {
            base.Channel.insertCourse(name, website, phone, basket_type, year_established, tee_type, course_type, terrain, basket_maker, course_private, p2p, guide, course_designer, user, address, state, city, country, zip);
        }
        
        public System.Threading.Tasks.Task insertCourseAsync(
                    string name, 
                    string website, 
                    string phone, 
                    string basket_type, 
                    string year_established, 
                    string tee_type, 
                    string course_type, 
                    string terrain, 
                    string basket_maker, 
                    System.Nullable<char> course_private, 
                    System.Nullable<char> p2p, 
                    System.Nullable<char> guide, 
                    string course_designer, 
                    string user, 
                    string address, 
                    string state, 
                    string city, 
                    string country, 
                    string zip) {
            return base.Channel.insertCourseAsync(name, website, phone, basket_type, year_established, tee_type, course_type, terrain, basket_maker, course_private, p2p, guide, course_designer, user, address, state, city, country, zip);
        }
        
        public void insertPark(string name, string hour_h, string hour_l, System.Nullable<char> guide, System.Nullable<char> pet, System.Nullable<char> pri, string user_id, string course_name) {
            base.Channel.insertPark(name, hour_h, hour_l, guide, pet, pri, user_id, course_name);
        }
        
        public System.Threading.Tasks.Task insertParkAsync(string name, string hour_h, string hour_l, System.Nullable<char> guide, System.Nullable<char> pet, System.Nullable<char> pri, string user_id, string course_name) {
            return base.Channel.insertParkAsync(name, hour_h, hour_l, guide, pet, pri, user_id, course_name);
        }
    }
}
